// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.GitHub.OpenApiClient.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate"/>, <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RepositoryRule : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern? RepositoryRuleBranchNamePattern { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern RepositoryRuleBranchNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning? RepositoryRuleCodeScanning { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning RepositoryRuleCodeScanning { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleCommitAuthorEmailPattern { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleCommitAuthorEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleCommitMessagePattern { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern RepositoryRuleCommitMessagePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleCommitterEmailPattern { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleCommitterEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation? RepositoryRuleCreation { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation RepositoryRuleCreation { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion? RepositoryRuleDeletion { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion RepositoryRuleDeletion { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction? RepositoryRuleFileExtensionRestriction { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction RepositoryRuleFileExtensionRestriction { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction? RepositoryRuleFilePathRestriction { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction RepositoryRuleFilePathRestriction { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength? RepositoryRuleMaxFilePathLength { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength RepositoryRuleMaxFilePathLength { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize? RepositoryRuleMaxFileSize { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize RepositoryRuleMaxFileSize { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue? RepositoryRuleMergeQueue { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue RepositoryRuleMergeQueue { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward? RepositoryRuleNonFastForward { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward RepositoryRuleNonFastForward { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest? RepositoryRulePullRequest { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest RepositoryRulePullRequest { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRequiredDeployments { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments RepositoryRuleRequiredDeployments { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRequiredLinearHistory { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRequiredLinearHistory { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRequiredSignatures { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures RepositoryRuleRequiredSignatures { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRequiredStatusChecks { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRequiredStatusChecks { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern? RepositoryRuleTagNamePattern { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern RepositoryRuleTagNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate? RepositoryRuleUpdate { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate RepositoryRuleUpdate { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows? RepositoryRuleWorkflows { get; set; }
#nullable restore
#else
        public global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows RepositoryRuleWorkflows { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRule();
            if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleBranchNamePattern = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-code-scanning".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCodeScanning = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitAuthorEmailPattern = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitMessagePattern = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCommitterEmailPattern = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleCreation = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleDeletion = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-file-extension-restriction".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleFileExtensionRestriction = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction();
            }
            else if("repository-rule-file-path-restriction".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleFilePathRestriction = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction();
            }
            else if("repository-rule-max-file-path-length".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMaxFilePathLength = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength();
            }
            else if("repository-rule-max-file-size".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMaxFileSize = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize();
            }
            else if("repository-rule-merge-queue".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleMergeQueue = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleNonFastForward = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRulePullRequest = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredDeployments = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredLinearHistory = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredSignatures = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleRequiredStatusChecks = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleTagNamePattern = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleUpdate = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.RepositoryRuleWorkflows = new global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(RepositoryRuleBranchNamePattern != null)
            {
                return RepositoryRuleBranchNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCodeScanning != null)
            {
                return RepositoryRuleCodeScanning.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null)
            {
                return RepositoryRuleCommitAuthorEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitMessagePattern != null)
            {
                return RepositoryRuleCommitMessagePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitterEmailPattern != null)
            {
                return RepositoryRuleCommitterEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCreation != null)
            {
                return RepositoryRuleCreation.GetFieldDeserializers();
            }
            else if(RepositoryRuleDeletion != null)
            {
                return RepositoryRuleDeletion.GetFieldDeserializers();
            }
            else if(RepositoryRuleFileExtensionRestriction != null)
            {
                return RepositoryRuleFileExtensionRestriction.GetFieldDeserializers();
            }
            else if(RepositoryRuleFilePathRestriction != null)
            {
                return RepositoryRuleFilePathRestriction.GetFieldDeserializers();
            }
            else if(RepositoryRuleMaxFilePathLength != null)
            {
                return RepositoryRuleMaxFilePathLength.GetFieldDeserializers();
            }
            else if(RepositoryRuleMaxFileSize != null)
            {
                return RepositoryRuleMaxFileSize.GetFieldDeserializers();
            }
            else if(RepositoryRuleMergeQueue != null)
            {
                return RepositoryRuleMergeQueue.GetFieldDeserializers();
            }
            else if(RepositoryRuleNonFastForward != null)
            {
                return RepositoryRuleNonFastForward.GetFieldDeserializers();
            }
            else if(RepositoryRulePullRequest != null)
            {
                return RepositoryRulePullRequest.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredDeployments != null)
            {
                return RepositoryRuleRequiredDeployments.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredLinearHistory != null)
            {
                return RepositoryRuleRequiredLinearHistory.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredSignatures != null)
            {
                return RepositoryRuleRequiredSignatures.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredStatusChecks != null)
            {
                return RepositoryRuleRequiredStatusChecks.GetFieldDeserializers();
            }
            else if(RepositoryRuleTagNamePattern != null)
            {
                return RepositoryRuleTagNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleUpdate != null)
            {
                return RepositoryRuleUpdate.GetFieldDeserializers();
            }
            else if(RepositoryRuleWorkflows != null)
            {
                return RepositoryRuleWorkflows.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(RepositoryRuleBranchNamePattern != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleBranchNamePattern);
            }
            else if(RepositoryRuleCodeScanning != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCodeScanning>(null, RepositoryRuleCodeScanning);
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleCommitAuthorEmailPattern);
            }
            else if(RepositoryRuleCommitMessagePattern != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleCommitMessagePattern);
            }
            else if(RepositoryRuleCommitterEmailPattern != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleCommitterEmailPattern);
            }
            else if(RepositoryRuleCreation != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleCreation>(null, RepositoryRuleCreation);
            }
            else if(RepositoryRuleDeletion != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleDeletion>(null, RepositoryRuleDeletion);
            }
            else if(RepositoryRuleFileExtensionRestriction != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFileExtensionRestriction>(null, RepositoryRuleFileExtensionRestriction);
            }
            else if(RepositoryRuleFilePathRestriction != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleFilePathRestriction>(null, RepositoryRuleFilePathRestriction);
            }
            else if(RepositoryRuleMaxFilePathLength != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFilePathLength>(null, RepositoryRuleMaxFilePathLength);
            }
            else if(RepositoryRuleMaxFileSize != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMaxFileSize>(null, RepositoryRuleMaxFileSize);
            }
            else if(RepositoryRuleMergeQueue != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleMergeQueue>(null, RepositoryRuleMergeQueue);
            }
            else if(RepositoryRuleNonFastForward != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleNonFastForward);
            }
            else if(RepositoryRulePullRequest != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRulePullRequest>(null, RepositoryRulePullRequest);
            }
            else if(RepositoryRuleRequiredDeployments != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRequiredDeployments);
            }
            else if(RepositoryRuleRequiredLinearHistory != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRequiredLinearHistory);
            }
            else if(RepositoryRuleRequiredSignatures != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRequiredSignatures);
            }
            else if(RepositoryRuleRequiredStatusChecks != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRequiredStatusChecks);
            }
            else if(RepositoryRuleTagNamePattern != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleTagNamePattern);
            }
            else if(RepositoryRuleUpdate != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleUpdate>(null, RepositoryRuleUpdate);
            }
            else if(RepositoryRuleWorkflows != null)
            {
                writer.WriteObjectValue<global::Soenneker.GitHub.OpenApiClient.Models.RepositoryRuleWorkflows>(null, RepositoryRuleWorkflows);
            }
        }
    }
}
#pragma warning restore CS0618
